B-1.c file -- C source code that should be preprocessed.
--------------------------------------------------------

int AddTwo(int a)
{
    a = a + 2;
    return a;
}

int main()
{
    int x = 3;
    x = AddTwo(x);
    return x;
}



B-1.i file -- C source code that should not be preprocessed.
-----------------------------------------------------------

# 1 "B-1.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 31 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 32 "<command-line>" 2
# 1 "B-1.c"
int AddTwo(int a)
{
    a = a + 2;
    return a;
}

int main()
{
    int x = 3;
    x = AddTwo(x);
    return x;
}



B-1.s file -- Assembler code.
-----------------------------

	.file	"B-1.c"
	.text
	.globl	AddTwo
	.type	AddTwo, @function
AddTwo:
.LFB0:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movl	%edi, -4(%rbp)
	addl	$2, -4(%rbp)
	movl	-4(%rbp), %eax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE0:
	.size	AddTwo, .-AddTwo
	.globl	main
	.type	main, @function
main:
.LFB1:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movl	$3, -4(%rbp)
	movl	-4(%rbp), %eax
	movl	%eax, %edi
	call	AddTwo
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE1:
	.size	main, .-main
	.ident	"GCC: (Ubuntu 9.3.0-10ubuntu2) 9.3.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	 1f - 0f
	.long	 4f - 1f
	.long	 5
0:
	.string	 "GNU"
1:
	.align 8
	.long	 0xc0000002
	.long	 3f - 2f
2:
	.long	 0x3
3:
	.align 8
4:



Dump of B-1.o using objdump options -l -d -r
--------------------------------------------

B-1.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <AddTwo>:
AddTwo():
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	89 7d fc             	mov    %edi,-0x4(%rbp)
   b:	83 45 fc 02          	addl   $0x2,-0x4(%rbp)
   f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  12:	5d                   	pop    %rbp
  13:	c3                   	retq   

0000000000000014 <main>:
main():
  14:	f3 0f 1e fa          	endbr64 
  18:	55                   	push   %rbp
  19:	48 89 e5             	mov    %rsp,%rbp
  1c:	48 83 ec 10          	sub    $0x10,%rsp
  20:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%rbp)
  27:	8b 45 fc             	mov    -0x4(%rbp),%eax
  2a:	89 c7                	mov    %eax,%edi
  2c:	e8 00 00 00 00       	callq  31 <main+0x1d>
			2d: R_X86_64_PLT32	AddTwo-0x4
  31:	89 45 fc             	mov    %eax,-0x4(%rbp)
  34:	8b 45 fc             	mov    -0x4(%rbp),%eax
  37:	c9                   	leaveq 
  38:	c3                   	retq



Dump of B-1.o using objdump options --prefix-addresses
------------------------------------------------------

B-1.o:     file format elf64-x86-64


Disassembly of section .text:
AddTwo():
0000000000000000 <AddTwo> endbr64 
0000000000000004 <AddTwo+0x4> push   %rbp
0000000000000005 <AddTwo+0x5> mov    %rsp,%rbp
0000000000000008 <AddTwo+0x8> mov    %edi,-0x4(%rbp)
000000000000000b <AddTwo+0xb> addl   $0x2,-0x4(%rbp)
000000000000000f <AddTwo+0xf> mov    -0x4(%rbp),%eax
0000000000000012 <AddTwo+0x12> pop    %rbp
0000000000000013 <AddTwo+0x13> retq   
main():
0000000000000014 <main> endbr64 
0000000000000018 <main+0x4> push   %rbp
0000000000000019 <main+0x5> mov    %rsp,%rbp
000000000000001c <main+0x8> sub    $0x10,%rsp
0000000000000020 <main+0xc> movl   $0x3,-0x4(%rbp)
0000000000000027 <main+0x13> mov    -0x4(%rbp),%eax
000000000000002a <main+0x16> mov    %eax,%edi
000000000000002c <main+0x18> callq  0000000000000031 <main+0x1d>
			2d: R_X86_64_PLT32	AddTwo-0x4
0000000000000031 <main+0x1d> mov    %eax,-0x4(%rbp)
0000000000000034 <main+0x20> mov    -0x4(%rbp),%eax
0000000000000037 <main+0x23> leaveq 
0000000000000038 <main+0x24> retq  