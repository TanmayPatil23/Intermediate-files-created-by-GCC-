B-2.c file -- C source code that should be preprocessed.
--------------------------------------------------------

int N;

int main()
{
    int i, a = 10;
    for(i= 0; i < 4; i++)
    {
        a = a + N;
    };
    return a;
}



B-2.i file -- C source code that should not be preprocessed.
-----------------------------------------------------------

# 1 "B-2.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 31 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 32 "<command-line>" 2
# 1 "B-2.c"
int N;

int main()
{
    int i, a = 10;
    for(i= 0; i < 4; i++)
    {
        a = a + N;
    };
    return a;
}



B-2.s file -- Assembler code.
-----------------------------

	.file	"B-2.c"
	.text
	.comm	N,4,4
	.globl	main
	.type	main, @function
main:
.LFB0:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movl	$10, -4(%rbp)
	movl	$0, -8(%rbp)
	jmp	.L2
.L3:
	movl	N(%rip), %eax
	addl	%eax, -4(%rbp)
	addl	$1, -8(%rbp)
.L2:
	cmpl	$3, -8(%rbp)
	jle	.L3
	movl	-4(%rbp), %eax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE0:
	.size	main, .-main
	.ident	"GCC: (Ubuntu 9.3.0-10ubuntu2) 9.3.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	 1f - 0f
	.long	 4f - 1f
	.long	 5
0:
	.string	 "GNU"
1:
	.align 8
	.long	 0xc0000002
	.long	 3f - 2f
2:
	.long	 0x3
3:
	.align 8
4:



Dump of B-2.o using objdump options -l -d -r
--------------------------------------------

B-2.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <main>:
main():
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	c7 45 fc 0a 00 00 00 	movl   $0xa,-0x4(%rbp)
   f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  16:	eb 0d                	jmp    25 <main+0x25>
  18:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 1e <main+0x1e>
			1a: R_X86_64_PC32	N-0x4
  1e:	01 45 fc             	add    %eax,-0x4(%rbp)
  21:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  25:	83 7d f8 03          	cmpl   $0x3,-0x8(%rbp)
  29:	7e ed                	jle    18 <main+0x18>
  2b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  2e:	5d                   	pop    %rbp
  2f:	c3                   	retq 



Dump of B-2.o using objdump options --prefix-addresses
------------------------------------------------------

B-2.o:     file format elf64-x86-64


Disassembly of section .text:
main():
0000000000000000 <main> endbr64 
0000000000000004 <main+0x4> push   %rbp
0000000000000005 <main+0x5> mov    %rsp,%rbp
0000000000000008 <main+0x8> movl   $0xa,-0x4(%rbp)
000000000000000f <main+0xf> movl   $0x0,-0x8(%rbp)
0000000000000016 <main+0x16> jmp    0000000000000025 <main+0x25>
0000000000000018 <main+0x18> mov    0x0(%rip),%eax        # 000000000000001e <main+0x1e>
			1a: R_X86_64_PC32	N-0x4
000000000000001e <main+0x1e> add    %eax,-0x4(%rbp)
0000000000000021 <main+0x21> addl   $0x1,-0x8(%rbp)
0000000000000025 <main+0x25> cmpl   $0x3,-0x8(%rbp)
0000000000000029 <main+0x29> jle    0000000000000018 <main+0x18>
000000000000002b <main+0x2b> mov    -0x4(%rbp),%eax
000000000000002e <main+0x2e> pop    %rbp
000000000000002f <main+0x2f> retq 