A-3.c file -- C source code that should be preprocessed.
--------------------------------------------------------
int main()
{
        int sum = 0;
        int i, j;

        while(sum < 100) {
                sum = sum * 2;
        }

        for(i=0; i<25; i++) {
                for(j=0; j<50; j++) {
                        sum = sum + i*j;
                }
        }
}



A-3.i file -- C source code that should not be preprocessed.
-----------------------------------------------------------

# 1 "A-3.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 31 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 32 "<command-line>" 2
# 1 "A-3.c"
int main()
{
        int sum = 0;
        int i, j;

        while(sum < 100) {
                sum = sum * 2;
        }

        for(i=0; i<25; i++) {
                for(j=0; j<50; j++) {
                        sum = sum + i*j;
                }
        }
}


A-3.s file -- Assembler code.
-----------------------------

	.file	"A-3.c"
	.text
	.globl	main
	.type	main, @function
main:
.LFB0:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movl	$0, -12(%rbp)
	jmp	.L2
.L3:
	sall	-12(%rbp)
.L2:
	cmpl	$99, -12(%rbp)
	jle	.L3
	movl	$0, -8(%rbp)
	jmp	.L4
.L7:
	movl	$0, -4(%rbp)
	jmp	.L5
.L6:
	movl	-8(%rbp), %eax
	imull	-4(%rbp), %eax
	addl	%eax, -12(%rbp)
	addl	$1, -4(%rbp)
.L5:
	cmpl	$49, -4(%rbp)
	jle	.L6
	addl	$1, -8(%rbp)
.L4:
	cmpl	$24, -8(%rbp)
	jle	.L7
	movl	$0, %eax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE0:
	.size	main, .-main
	.ident	"GCC: (Ubuntu 9.3.0-10ubuntu2) 9.3.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	 1f - 0f
	.long	 4f - 1f
	.long	 5
0:
	.string	 "GNU"
1:
	.align 8
	.long	 0xc0000002
	.long	 3f - 2f
2:
	.long	 0x3
3:
	.align 8
4:


Dump of A-3.o using objdump options -l -d -r
--------------------------------------------

A-3.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <main>:
main():
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
   f:	eb 03                	jmp    14 <main+0x14>
  11:	d1 65 f4             	shll   -0xc(%rbp)
  14:	83 7d f4 63          	cmpl   $0x63,-0xc(%rbp)
  18:	7e f7                	jle    11 <main+0x11>
  1a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  21:	eb 21                	jmp    44 <main+0x44>
  23:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  2a:	eb 0e                	jmp    3a <main+0x3a>
  2c:	8b 45 f8             	mov    -0x8(%rbp),%eax
  2f:	0f af 45 fc          	imul   -0x4(%rbp),%eax
  33:	01 45 f4             	add    %eax,-0xc(%rbp)
  36:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  3a:	83 7d fc 31          	cmpl   $0x31,-0x4(%rbp)
  3e:	7e ec                	jle    2c <main+0x2c>
  40:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  44:	83 7d f8 18          	cmpl   $0x18,-0x8(%rbp)
  48:	7e d9                	jle    23 <main+0x23>
  4a:	b8 00 00 00 00       	mov    $0x0,%eax
  4f:	5d                   	pop    %rbp
  50:	c3                   	retq


Dump of A-3.o using objdump options -prefix-addresses
-----------------------------------------------------

A-3.o:     file format elf64-x86-64


Disassembly of section .text:
main():
0000000000000000 <main> endbr64 
0000000000000004 <main+0x4> push   %rbp
0000000000000005 <main+0x5> mov    %rsp,%rbp
0000000000000008 <main+0x8> movl   $0x0,-0xc(%rbp)
000000000000000f <main+0xf> jmp    0000000000000014 <main+0x14>
0000000000000011 <main+0x11> shll   -0xc(%rbp)
0000000000000014 <main+0x14> cmpl   $0x63,-0xc(%rbp)
0000000000000018 <main+0x18> jle    0000000000000011 <main+0x11>
000000000000001a <main+0x1a> movl   $0x0,-0x8(%rbp)
0000000000000021 <main+0x21> jmp    0000000000000044 <main+0x44>
0000000000000023 <main+0x23> movl   $0x0,-0x4(%rbp)
000000000000002a <main+0x2a> jmp    000000000000003a <main+0x3a>
000000000000002c <main+0x2c> mov    -0x8(%rbp),%eax
000000000000002f <main+0x2f> imul   -0x4(%rbp),%eax
0000000000000033 <main+0x33> add    %eax,-0xc(%rbp)
0000000000000036 <main+0x36> addl   $0x1,-0x4(%rbp)
000000000000003a <main+0x3a> cmpl   $0x31,-0x4(%rbp)
000000000000003e <main+0x3e> jle    000000000000002c <main+0x2c>
0000000000000040 <main+0x40> addl   $0x1,-0x8(%rbp)
0000000000000044 <main+0x44> cmpl   $0x18,-0x8(%rbp)
0000000000000048 <main+0x48> jle    0000000000000023 <main+0x23>
000000000000004a <main+0x4a> mov    $0x0,%eax
000000000000004f <main+0x4f> pop    %rbp
0000000000000050 <main+0x50> retq